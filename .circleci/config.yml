version: 2.1

workflows:
  pack-binaries:
    jobs:
      - pack-binaries
      - upload-binaries:
          context:
            - github
          requires:
            - pack-binaries

jobs:

  pack-binaries:
    machine:
      image: ubuntu-2204:current
    resource_class: arm.medium
    steps:
      - run: |
          cd ~
          echo 'export QT_NAME="Qt"' >> "$BASH_ENV"
          # echo 'export QT_VER="6.8.0"' >> "$BASH_ENV"
          QT_VER="6.8.0"
          echo 'export QT_DIR="$(pwd)/$QT_NAME"' >> "$BASH_ENV"
          echo 'export GLIBC_NAME="glibc"' >> "$BASH_ENV"
          echo 'export GLIBC_VER="2.40"' >> "$BASH_ENV"
          echo 'export GLIBC_DIR="$(pwd)/$GLIBC_NAME"' >> "$BASH_ENV"
          echo 'export GLIBC_INSTALL="$GLIBC_DIR/build/install"' >> "$BASH_ENV"
          echo QT_NAME $QT_NAME ${QT_NAME} {{ .Environment.QT_NAME }}
          echo QT_VER $QT_VER ${QT_VER} {{ .Environment.QT_VER }}
          echo QT_DIR $QT_DIR
          echo GLIBC_NAME $GLIBC_NAME
          echo GLIBC_VER $GLIBC_VER
          echo GLIBC_DIR $GLIBC_DIR
          echo GLIBC_INSTALL $GLIBC_INSTALL
      - restore_cache:
          name: Restore Qt Cache
          key: Qt-{{ .Environment.QT_VER }}-v2
      - run: |
          if [ -d "$QT_DIR" ]; then
            echo "Qt $QT_VER already installed."
          else
            echo "Downloading Qt $QT_VER."
            python -m pip install setuptools aqtinstall
            cd ~
            python -m aqt install-qt --outputdir $QT_DIR linux_arm64 desktop $QT_VER linux_gcc_arm64
          fi
      - save_cache:
          name: Save Qt Cache
          key: Qt-{{ .Environment.QT_VER }}-v2
          paths:
            - ../{{ .Environment.QT_NAME }}

      - run: ls
      - checkout
      - run: |
          mkdir -p ~/artifacts
          node -p "require('./package').version" > ~/artifacts/pkg-version
      - run: $QT_DIR/$QT_VER/gcc_arm64/bin/qmake -spec linux-aarch64-gnu-g++ src/qt/_qmlui.pro

      - restore_cache:
          name: Restore GLIBC Cache
          key: glibc-{{ .Environment.GLIBC_VER }}-v2
      - run: |
          if [ -d "$GLIBC_DIR" ]; then
            echo "GLIBC $GLIBC_VER already cached."
          else
            echo "Building GLIBC $GLIBC_VER from source."
            sudo apt-get -y install bison
            cd ~
            git clone --branch release/$GLIBC_VER/master --depth 1 https://sourceware.org/git/glibc.git
            cd glibc
            mkdir build
            cd build
            ../configure --prefix "$GLIBC_INSTALL"
            make -j `nproc`
          fi
      - save_cache:
          name: Save GLIBC Cache
          key: glibc-{{ .Environment.GLIBC_VER }}-v2
          paths:
            - ../{{ .Environment.GLIBC_NAME }}

      - run: |
          cd $GLIBC_DIR/build
          sudo make install -j `nproc`

      - run: make # _qmlui.pro

      - run: |
          mkdir -p ~/bin_tmp
          cp src/libqmlui.so ~/bin_tmp
          cd ~/bin_tmp && tar -czf ../aarch64.gz *
          mkdir -p ~/artifacts && mv ~/aarch64.gz ~/artifacts
      - persist_to_workspace:
          root: ~/artifacts
          paths:
            - aarch64.gz
            - pkg-version

  upload-binaries:
    docker:
      - image: circleci/golang:1.8
    steps:
      - attach_workspace:
          at: /tmp/artifacts
      - run: go get github.com/tcnksm/ghr
      - run: |
          PKG_VERSION=`cat /tmp/artifacts/pkg-version`
          ghr -u "node-3d" -r "${CIRCLE_PROJECT_REPONAME}" -c "${CIRCLE_SHA1}" -n "Release ${PKG_VERSION}" -replace ${PKG_VERSION} /tmp/artifacts/aarch64.gz
